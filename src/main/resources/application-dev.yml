eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8888/eureka/
spring:
  application:
    name: gateway
# 过滤器/转发配置 begin--------------------------------------
  cloud:
    gateway:
      default-filters:
      routes:
      #------------------------------------------------------------------------
      - id: riskManage
        uri: lb://service-riskmanage #http://127.0.0.1:8093
        predicates:
        - Path= /risk/**
      #------------------------------------------------------------------------
      - id: systemManage
        uri: lb://service-systemManage #http://127.0.0.1:8082
        predicates:
        - Path= /system/**
      #------------------------------------------------------------------------
      - id: auditManage
        uri: lb://service-auditmanage #8102
        predicates:
        - Path= /audit/**
      #------------------------------------------------------------------------
      - id: userManage
        uri: lb://service-usermanage #http://127.0.0.1:8086
        predicates:
        - Path= /user/**
      #------------------------------------------------------------------------
      - id: shipCompanyManage
        uri: lb://service-shipCompanymanage #http://127.0.0.1:8104
        predicates:
        - Path= /shipCompany/**
      #------------------------------------------------------------------------
      - id: webManage
        uri: lb://service-webmanage #http://127.0.0.1:8084
        predicates:
        - Path= /web/**
      #------------------------------------------------------------------------
      - id: fundMange
        uri: lb://service-fundmanage #http://127.0.0.1:8088
        predicates:
        - Path= /fund/**
      #------------------------------------------------------------------------
      - id: loanMange
        uri: lb://service-loanmanage #http://127.0.0.1:8094
        predicates:
        - Path= /loan/**
      #------------------------------------------------------------------------
      - id: comminssionMange
        uri: lb://service-commissionmanage #http://127.0.0.1:8092
        predicates:
        - Path= /commission/**
      #------------------------------------------------------------------------
      - id: orderMange
        uri: lb://service-ordermanage #http://127.0.0.1:8100
        predicates:
        - Path= /order/**
      #------------------------------------------------------------------------
      - id: faithMange
        uri: lb://service-faithmanage #http://127.0.0.1:8200
        predicates:
        - Path= /faith/**
      #------------------------------------------------------------------------
      - id: ppManage
        uri: lb://service-ppmanage #http://127.0.0.1:8400
        predicates:
        - Path= /ppManage/**

# 过滤器/转发配置 end--------------------------------------


  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.p6spy.engine.spy.P6SpyDriver
    url: jdbc:p6spy:mysql://rdsaibairjvqvezbo.mysql.rds.aliyuncs.com:3306/hdqbdev?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: hdqbdev
    password: hdqbdev_WALLET
    # 下面为连接池的补充设置，应用到上面所有数据源中
    # 初始化大小，最小，最  大
    initialSize: 5
    minIdle: 5
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    # 验证语句
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    # 从连接池获取连接时,是否检测连接可用性
    testOnBorrow: false
    # 释放连接到连接池时,是否检测连接可用性
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    # psCache缓存 100
    maxOpenPreparedStatements: 100
    maxPoolPreparedStatementPerConnectionSize: 50
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,log4j
    # 对于建立连接过长的连接强制关闭
    removeAbandoned: true
    # 如果连接建立时间超过了30分钟，则强制将其关闭
    removeAbandonedTimeout: 1800
    # 将当前关闭动作记录到日志
    logAbandoned: true
mybatis:
  config-locations: classpath:config/mybatis-config.xml
  mapper-locations: classpath:*.xml
server:
  port: 9000
logging:
  level:
    org:
      springframework:
        cloud:
          gateway: TRACE




